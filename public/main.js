// Generated by CoffeeScript 1.9.3
(function() {
  var App, Event, Network,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    function App() {
      var url;
      url = "ws://" + document.location.host + "/ws";
      this.network = new Network(url);
      this.event = new Event(this.network);
      this.network.connect(this.event);
    }

    return App;

  })();

  Network = (function() {
    function Network(url1) {
      this.url = url1;
      this.send = bind(this.send, this);
      this.disconnect = bind(this.disconnect, this);
      this.connect = bind(this.connect, this);
      this.ws = null;
    }

    Network.prototype.connect = function(event) {
      this.ws = new WebSocket(this.url);
      this.ws.onopen = event.connected;
      this.ws.onclose = event.disconnected;
      this.ws.onmessage = event.receive;
      this.ws.onerror = event.error;
      return this.event = event;
    };

    Network.prototype.disconnect = function() {
      this.ws.close();
      return this.ws = null;
    };

    Network.prototype.send = function(msg) {
      if (this.ws && msg) {
        return this.ws.send(msg);
      }
    };

    return Network;

  })();

  Event = (function() {
    function Event(network) {
      this.network = network;
      this.send = bind(this.send, this);
      this.register = bind(this.register, this);
      this.register = {};
    }

    Event.prototype.register = function(srcModule, destModuleFunc) {
      if (!this.register[srcModule]) {
        this.register[srcModule] = [];
      }
      return this.register[srcModule].push(destModuleFunc);
    };

    Event.prototype.connected = function(e) {};

    Event.prototype.disconnected = function(e) {};

    Event.prototype.receive = function(e) {
      var data, func, i, len, ref, results;
      data = JSON.parse(e.data);
      if (this.register[data.Module]) {
        ref = this.register[data.Module];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          func = ref[i];
          results.push(func(data));
        }
        return results;
      }
    };

    Event.prototype.error = function(e) {};

    Event.prototype.send = function(module, name, task, value) {
      var data;
      data = {
        Module: module,
        Name: name,
        Task: task,
        Value: value
      };
      return this.network.send(JSON.stringify(data));
    };

    return Event;

  })();

  new App;

}).call(this);
