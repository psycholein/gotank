// Generated by CoffeeScript 1.9.3
(function() {
  var App, BasicModule, Event, Network, Resources,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.App = App = (function() {
    function App() {
      var url;
      url = "ws://" + document.location.host + "/ws";
      this.network = new Network(url);
      this.event = new Event(this.network);
      this.resources = new Resources(this.event);
      this.network.connect(this.event);
    }

    return App;

  })();

  window.Network = Network = (function() {
    function Network(url1) {
      this.url = url1;
      this.send = bind(this.send, this);
      this.reconnect = bind(this.reconnect, this);
      this.disconnect = bind(this.disconnect, this);
      this.connect = bind(this.connect, this);
      this.ws = null;
      this.tryReconnect = null;
    }

    Network.prototype.connect = function(event) {
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        return;
      }
      this.ws = new WebSocket(this.url);
      this.ws.onopen = event.connected;
      this.ws.onclose = event.disconnected;
      this.ws.onmessage = event.receive;
      this.ws.onerror = event.error;
      return this.event = event;
    };

    Network.prototype.disconnect = function() {
      this.ws.close();
      return this.ws = null;
    };

    Network.prototype.reconnect = function() {
      clearTimeout(this.tryConnect);
      return this.tryReconnect = setTimeout(((function(_this) {
        return function() {
          if (!_this.ws || _this.ws.readyState !== WebSocket.OPEN) {
            return _this.connect(_this.event);
          }
        };
      })(this)), 1000);
    };

    Network.prototype.send = function(msg) {
      if (msg && this.ws && this.ws.readyState === WebSocket.OPEN) {
        return this.ws.send(msg);
      }
    };

    return Network;

  })();

  Event = (function() {
    function Event(network) {
      this.network = network;
      this.send = bind(this.send, this);
      this.receive = bind(this.receive, this);
      this.error = bind(this.error, this);
      this.disconnected = bind(this.disconnected, this);
      this.connected = bind(this.connected, this);
      this.register = bind(this.register, this);
      this.tryConnect = null;
      this.registered = {};
    }

    Event.prototype.register = function(srcModule, destModuleFunc) {
      if (!this.registered[srcModule]) {
        this.registered[srcModule] = [];
      }
      return this.registered[srcModule].push(destModuleFunc);
    };

    Event.prototype.connected = function(e) {};

    Event.prototype.disconnected = function(e) {
      return this.network.reconnect();
    };

    Event.prototype.error = function(e) {
      return this.network.reconnect();
    };

    Event.prototype.receive = function(e) {
      var data, func, i, j, len, len1, ref, ref1, results;
      data = JSON.parse(e.data);
      if (!data) {
        return;
      }
      if (this.registered[data.Module]) {
        ref = this.registered[data.Module];
        for (i = 0, len = ref.length; i < len; i++) {
          func = ref[i];
          func(data);
        }
      }
      if (this.registered['_all']) {
        ref1 = this.registered['_all'];
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          func = ref1[j];
          results.push(func(data));
        }
        return results;
      }
    };

    Event.prototype.send = function(module, name, task, value) {
      var data;
      data = {
        Module: module,
        Name: name,
        Task: task,
        Value: value
      };
      return this.network.send(JSON.stringify(data));
    };

    return Event;

  })();

  window.Resources = Resources = (function() {
    function Resources(event1) {
      this.event = event1;
      this.getRescources = bind(this.getRescources, this);
      this.loadResource = bind(this.loadResource, this);
      this.initModule = bind(this.initModule, this);
      this.loadModule = bind(this.loadModule, this);
      this.router = bind(this.router, this);
      this.modules = {};
      this.event.register('_all', this.router);
    }

    Resources.prototype.router = function(event) {
      if (!(event.Name === 'module' || event.Task === 'web')) {
        return;
      }
      switch (event.Value) {
        case "load":
          return this.loadModule(event);
        case "init":
          return this.initModule(event);
      }
    };

    Resources.prototype.loadModule = function(event) {
      var css, file;
      if (this.modules[event.Module]) {
        return;
      }
      this.modules[event.Module] = {};
      file = "modules/" + event.Module + "/" + event.Module;
      this.loadResource(event.Module, file + ".js", 'script', 'js');
      this.loadResource(event.Module, file + ".ect", 'text', 'ect');
      css = $("<link rel='stylesheet' href='" + file + ".css' type='text/css' />");
      return $("head").append(css);
    };

    Resources.prototype.initModule = function(event) {
      var mod, module, name;
      name = this.ucFirst(event.Module);
      if (!window[name]) {
        return;
      }
      mod = this.modules[event.Module];
      if (!mod["modules"]) {
        mod["modules"] = {};
      }
      if (mod["modules"][event.Name]) {
        return;
      }
      module = new window[name](this.event, this, event.Module, event.Name);
      return mod["modules"][event.Name] = module;
    };

    Resources.prototype.loadResource = function(module, file, type, res) {
      return $.ajax({
        async: false,
        url: file,
        dataType: type,
        success: (function(_this) {
          return function(data) {
            _this.modules[module][res] = data;
            return true;
          };
        })(this)
      });
    };

    Resources.prototype.getRescources = function(module) {
      return this.modules[module];
    };

    Resources.prototype.ucFirst = function(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };

    return Resources;

  })();

  window.BasicModule = BasicModule = (function() {
    function BasicModule(event1, resources, module1, name1) {
      this.event = event1;
      this.resources = resources;
      this.module = module1;
      this.name = name1;
      this.afterInit = bind(this.afterInit, this);
      this.router = bind(this.router, this);
      this.config = bind(this.config, this);
      this.initTemplate = bind(this.initTemplate, this);
      this.renderer = ECT({
        root: this.resources.getRescources(this.module)
      });
      this.config();
      this.initTemplate();
      this.event.register(this.module, this.router);
      this.afterInit();
    }

    BasicModule.prototype.initTemplate = function() {
      var html;
      html = this.renderer.render('ect', {
        module: this.module,
        name: this.name
      });
      $(".content ." + this.position).append(html);
      return this.selector = ".content ." + this.position + " .module." + this.module + "[data-name=" + this.name + "]";
    };

    BasicModule.prototype.config = function() {
      return this.position = "middle";
    };

    BasicModule.prototype.router = function(event) {};

    BasicModule.prototype.afterInit = function() {};

    return BasicModule;

  })();

  $(function() {
    return new App;
  });

}).call(this);
