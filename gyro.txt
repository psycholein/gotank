package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"gotank/libs/embd"
	_ "gotank/libs/embd/host/all"
	"time"
)

const MPU6050_RA_ACCEL_XOUT_H = 0x3B
const MPU6050_RA_PWR_MGMT_1 = 0x6B
const MPU6050_PWR1_CLKSEL_BIT = 2
const MPU6050_PWR1_CLKSEL_LENGTH = 3
const MPU6050_CLOCK_PLL_XGYRO = 0x01
const MPU6050_GYRO_FS_250 = 0x00
const MPU6050_RA_GYRO_CONFIG = 0x1B
const MPU6050_GCONFIG_FS_SEL_LENGTH = 2
const MPU6050_GCONFIG_FS_SEL_BIT = 4
const MPU6050_RA_ACCEL_CONFIG = 0x1C
const MPU6050_ACONFIG_AFS_SEL_BIT = 4
const MPU6050_ACONFIG_AFS_SEL_LENGTH = 2
const MPU6050_ACCEL_FS_2 = 0x00
const MPU6050_PWR1_SLEEP_BIT = 6

type ThreeDData struct {
	X int16
	Y int16
	Z int16
}

type MPU6050Driver struct {
	bus           embd.I2CBus
	addr          byte
	interval      time.Duration
	Accelerometer ThreeDData
	Gyroscope     ThreeDData
	Temperature   int16
}

func NewMPU6050Driver(bus embd.I2CBus, addr byte, v ...time.Duration) *MPU6050Driver {
	m := &MPU6050Driver{
		bus:      bus,
		addr:     addr,
		interval: 50 * time.Millisecond,
	}

	if len(v) > 0 {
		m.interval = v[0]
	}

	return m
}

func (h *MPU6050Driver) Start() (err error) {
	err = h.initialize()
	if err != nil {
		return
	}
	go func() {
		ret := make([]byte, 14)
		for {
			err := h.bus.ReadFromReg(h.addr, MPU6050_RA_ACCEL_XOUT_H, ret)
			if err == nil {
				buf := bytes.NewBuffer(ret)

				binary.Read(buf, binary.BigEndian, &h.Accelerometer)
				binary.Read(buf, binary.BigEndian, &h.Temperature)
				binary.Read(buf, binary.BigEndian, &h.Gyroscope)
				h.Temperature = int16(float64(h.Temperature)/34.0 + 365.3)
			}

			<-time.After(h.interval)
		}
	}()
	return nil
}

func (h *MPU6050Driver) initialize() (err error) {
	err = h.bus.WriteByteToReg(h.addr, MPU6050_RA_PWR_MGMT_1, 0)
	if err != nil {
		return
	}

	err = h.bus.WriteToReg(h.addr, MPU6050_RA_PWR_MGMT_1, []byte{
		MPU6050_PWR1_CLKSEL_BIT,
		MPU6050_PWR1_CLKSEL_LENGTH,
		MPU6050_CLOCK_PLL_XGYRO})
	if err != nil {
		return
	}

	err = h.bus.WriteToReg(h.addr, MPU6050_GYRO_FS_250, []byte{
		MPU6050_RA_GYRO_CONFIG,
		MPU6050_GCONFIG_FS_SEL_LENGTH,
		MPU6050_GCONFIG_FS_SEL_BIT})
	if err != nil {
		return
	}

	err = h.bus.WriteToReg(h.addr, MPU6050_RA_ACCEL_CONFIG, []byte{
		MPU6050_ACONFIG_AFS_SEL_BIT,
		MPU6050_ACONFIG_AFS_SEL_LENGTH,
		MPU6050_ACCEL_FS_2})
	if err != nil {
		return
	}

	err = h.bus.WriteToReg(h.addr, MPU6050_RA_PWR_MGMT_1, []byte{
		MPU6050_PWR1_SLEEP_BIT, 0})
	if err != nil {
		return
	}

	return nil
}

func main() {
	embd.InitGPIO()

	mpu := NewMPU6050Driver(embd.NewI2CBus(1), 0x68)
	mpu.Start()

	for {
		time.Sleep(time.Second)
		fmt.Println(mpu.Accelerometer, mpu.Gyroscope, mpu.Temperature)
	}

	return

	pin, _ := embd.NewDigitalPin(23)
	pin.SetDirection(embd.In)

	for {
		fmt.Println(pin.Read())
		fmt.Println(pin.N())
		time.Sleep(100 * time.Millisecond)
	}
	embd.CloseGPIO()
}
